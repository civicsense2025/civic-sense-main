---
description: Android app development
globs: 
alwaysApply: false
---
# CivicSense Mobile Android Development Rules

*Monorepo Structure: `../../civic-sense-main/` with web app at `../web/`*

## 🏗️ Project Architecture

### Monorepo Structure
```
civic-sense-main/
├── apps/
│   ├── web/                    # Existing Next.js app
│   └── mobile/                 # Expo app (current context)
├── packages/
│   ├── shared/                 # Shared business logic
│   │   ├── database/          # Supabase client & types
│   │   ├── auth/              # Authentication logic
│   │   ├── quiz/              # Quiz engine & logic
│   │   ├── multiplayer/       # Multiplayer functionality
│   │   └── utils/             # Utility functions
│   ├── ui-web/                # Web-specific UI components
│   ├── ui-mobile/             # Mobile-specific UI components
│   └── ui-shared/             # Platform-agnostic components
└── supabase/                  # Database migrations & config
```

## 🤖 Android-Specific Development Standards

### 1. App Configuration (app.config.ts)
```typescript
// apps/mobile/app.config.ts
import { ExpoConfig, ConfigContext } from 'expo/config';

export default ({ config }: ConfigContext): ExpoConfig => ({
  ...config,
  name: 'CivicSense',
  slug: 'civicsense',
  version: '1.0.0',
  orientation: 'portrait',
  icon: './assets/icon.png',
  userInterfaceStyle: 'automatic',
  android: {
    package: 'com.civicsense.app',
    versionCode: 1,
    compileSdkVersion: 34,
    targetSdkVersion: 34,
    minSdkVersion: 21,
    adaptiveIcon: {
      foregroundImage: './assets/adaptive-icon.png',
      backgroundColor: '#3B82F6',
      monochromeImage: './assets/adaptive-icon-monochrome.png',
    },
    permissions: [
      'CAMERA',
      'RECORD_AUDIO',
      'READ_EXTERNAL_STORAGE',
      'WRITE_EXTERNAL_STORAGE',
      'INTERNET',
      'ACCESS_NETWORK_STATE',
      'VIBRATE',
      'USE_FINGERPRINT',
      'USE_BIOMETRIC',
    ],
    intentFilters: [
      {
        action: 'VIEW',
        autoVerify: true,
        data: [
          {
            scheme: 'https',
            host: 'civicsense.com',
          },
        ],
        category: ['BROWSABLE', 'DEFAULT'],
      },
    ],
  },
  plugins: [
    'expo-router',
    'expo-secure-store',
    [
      'expo-build-properties',
      {
        android: {
          newArchEnabled: true,
          compileSdkVersion: 34,
          targetSdkVersion: 34,
          minSdkVersion: 21,
        }
      }
    ]
  ],
});
```

### 2. Android-Specific UI Guidelines

#### Material Design 3 Integration
```typescript
// packages/ui-mobile/src/theme/android-colors.ts
export const AndroidColors = {
  // CivicSense brand colors optimized for Android
  primary: '#3B82F6',           // Authority Blue
  onPrimary: '#FFFFFF',
  primaryContainer: '#E3F2FD',
  onPrimaryContainer: '#0D47A1',
  
  secondary: '#10B981',         // Empowerment Green
  onSecondary: '#FFFFFF',
  secondaryContainer: '#E8F5E8',
  onSecondaryContainer: '#1B5E20',
  
  tertiary: '#F59E0B',          // Insight Gold
  onTertiary: '#FFFFFF',
  tertiaryContainer: '#FFF8E1',
  onTertiaryContainer: '#E65100',
  
  // Surface colors
  surface: '#FEFBFF',
  onSurface: '#1C1B1F',
  surfaceVariant: '#E7E0EC',
  onSurfaceVariant: '#49454F',
  
  // Background colors
  background: '#FEFBFF',
  onBackground: '#1C1B1F',
  
  // Error colors
  error: '#BA1A1A',
  onError: '#FFFFFF',
  errorContainer: '#FFDAD6',
  onErrorContainer: '#410002',
  
  // Outline colors
  outline: '#79747E',
  outlineVariant: '#CAC4D0',
  
  // Other colors
  shadow: '#000000',
  scrim: '#000000',
  inverseSurface: '#313033',
  inverseOnSurface: '#F4EFF4',
  inversePrimary: '#C0C7FF',
} as const;
```

#### Android Typography Scale (Material Design)
```typescript
// packages/ui-mobile/src/theme/android-typography.ts
export const AndroidTypography = {
  displayLarge: {
    fontSize: 57,
    fontWeight: '400' as const,
    lineHeight: 64,
    letterSpacing: -0.25,
  },
  displayMedium: {
    fontSize: 45,
    fontWeight: '400' as const,
    lineHeight: 52,
    letterSpacing: 0,
  },
  displaySmall: {
    fontSize: 36,
    fontWeight: '400' as const,
    lineHeight: 44,
    letterSpacing: 0,
  },
  headlineLarge: {
    fontSize: 32,
    fontWeight: '400' as const,
    lineHeight: 40,
    letterSpacing: 0,
  },
  headlineMedium: {
    fontSize: 28,
    fontWeight: '400' as const,
    lineHeight: 36,
    letterSpacing: 0,
  },
  headlineSmall: {
    fontSize: 24,
    fontWeight: '400' as const,
    lineHeight: 32,
    letterSpacing: 0,
  },
  titleLarge: {
    fontSize: 22,
    fontWeight: '400' as const,
    lineHeight: 28,
    letterSpacing: 0,
  },
  titleMedium: {
    fontSize: 16,
    fontWeight: '500' as const,
    lineHeight: 24,
    letterSpacing: 0.15,
  },
  titleSmall: {
    fontSize: 14,
    fontWeight: '500' as const,
    lineHeight: 20,
    letterSpacing: 0.1,
  },
  bodyLarge: {
    fontSize: 16,
    fontWeight: '400' as const,
    lineHeight: 24,
    letterSpacing: 0.5,
  },
  bodyMedium: {
    fontSize: 14,
    fontWeight: '400' as const,
    lineHeight: 20,
    letterSpacing: 0.25,
  },
  bodySmall: {
    fontSize: 12,
    fontWeight: '400' as const,
    lineHeight: 16,
    letterSpacing: 0.4,
  },
  labelLarge: {
    fontSize: 14,
    fontWeight: '500' as const,
    lineHeight: 20,
    letterSpacing: 0.1,
  },
  labelMedium: {
    fontSize: 12,
    fontWeight: '500' as const,
    lineHeight: 16,
    letterSpacing: 0.5,
  },
  labelSmall: {
    fontSize: 11,
    fontWeight: '500' as const,
    lineHeight: 16,
    letterSpacing: 0.5,
  },
} as const;
```

### 3. Android Authentication (Biometric + OAuth)

#### Fingerprint/Biometric Integration
```typescript
// packages/shared/auth/android-biometric-auth.ts
import * as LocalAuthentication from 'expo-local-authentication';
import * as SecureStore from 'expo-secure-store';
import { Platform } from 'react-native';

export class AndroidBiometricAuth {
  static async isBiometricAvailable(): Promise<boolean> {
    if (Platform.OS !== 'android') return false;
    
    const compatible = await LocalAuthentication.hasHardwareAsync();
    const enrolled = await LocalAuthentication.isEnrolledAsync();
    const supportedTypes = await LocalAuthentication.supportedAuthenticationTypesAsync();
    
    return compatible && enrolled && supportedTypes.length > 0;
  }

  static async authenticateWithBiometric(): Promise<boolean> {
    const result = await LocalAuthentication.authenticateAsync({
      promptMessage: 'Authenticate to access CivicSense',
      subtitle: 'Use your fingerprint or face to continue',
      fallbackLabel: 'Use PIN',
      cancelLabel: 'Cancel',
      requireConfirmation: false,
    });
    return result.success;
  }

  static async storeBiometricToken(token: string): Promise<void> {
    await SecureStore.setItemAsync('biometric_token', token, {
      requireAuthentication: true,
      authenticationPrompt: 'Authenticate to save your session',
    });
  }

  static async getBiometricSupportedTypes(): Promise<string[]> {
    const types = await LocalAuthentication.supportedAuthenticationTypesAsync();
    return types.map(type => {
      switch (type) {
        case LocalAuthentication.AuthenticationType.FINGERPRINT:
          return 'Fingerprint';
        case LocalAuthentication.AuthenticationType.FACIAL_RECOGNITION:
          return 'Face Recognition';
        case LocalAuthentication.AuthenticationType.IRIS:
          return 'Iris';
        default:
          return 'Biometric';
      }
    });
  }
}
```

#### Google Sign In Integration
```typescript
// packages/shared/auth/google-auth.ts
import * as Google from 'expo-auth-session/providers/google';
import * as WebBrowser from 'expo-web-browser';
import { supabase } from '../database/client';

WebBrowser.maybeCompleteAuthSession();

export class GoogleAuthService {
  private static config = {
    androidClientId: process.env.EXPO_PUBLIC_GOOGLE_ANDROID_CLIENT_ID,
    webClientId: process.env.EXPO_PUBLIC_GOOGLE_WEB_CLIENT_ID,
  };

  static useGoogleAuth() {
    const [request, response, promptAsync] = Google.useAuthRequest({
      androidClientId: this.config.androidClientId,
      webClientId: this.config.webClientId,
    });

    return { request, response, promptAsync };
  }

  static async signInWithGoogle(idToken: string) {
    try {
      const { error } = await supabase.auth.signInWithIdToken({
        provider: 'google',
        token: idToken,
      });

      if (error) throw error;
    } catch (error) {
      console.error('Google Sign In Error:', error);
      throw error;
    }
  }
}
```

### 4. Android-Specific Components

#### Material Design Button Component
```typescript
// packages/ui-mobile/src/components/android/MaterialButton.tsx
import React from 'react';
import { TouchableRipple } from 'react-native-paper';
import { View, Text, StyleSheet, ViewStyle } from 'react-native';
import { AndroidColors, AndroidTypography } from '../../theme';

interface MaterialButtonProps {
  title: string;
  onPress: () => void;
  variant?: 'filled' | 'outlined' | 'text' | 'elevated' | 'tonal';
  size?: 'large' | 'medium' | 'small';
  disabled?: boolean;
  icon?: React.ReactNode;
  style?: ViewStyle;
}

export const MaterialButton: React.FC<MaterialButtonProps> = ({
  title,
  onPress,
  variant = 'filled',
  size = 'medium',
  disabled = false,
  icon,
  style,
}) => {
  return (
    <TouchableRipple
      onPress={onPress}
      disabled={disabled}
      rippleColor={AndroidColors.primary + '20'}
      style={[
        styles.base,
        styles[variant],
        styles[size],
        disabled && styles.disabled,
        style,
      ]}
    >
      <View style={styles.content}>
        {icon && <View style={styles.icon}>{icon}</View>}
        <Text style={[styles.text, styles[`${variant}Text`], styles[`${size}Text`]]}>
          {title}
        </Text>
      </View>
    </TouchableRipple>
  );
};

const styles = StyleSheet.create({
  base: {
    borderRadius: 20,
    minHeight: 40,
    justifyContent: 'center',
    alignItems: 'center',
  },
  filled: {
    backgroundColor: AndroidColors.primary,
    elevation: 0,
  },
  outlined: {
    backgroundColor: 'transparent',
    borderWidth: 1,
    borderColor: AndroidColors.outline,
  },
  text: {
    backgroundColor: 'transparent',
  },
  elevated: {
    backgroundColor: AndroidColors.surface,
    elevation: 1,
  },
  tonal: {
    backgroundColor: AndroidColors.secondaryContainer,
  },
  large: {
    paddingHorizontal: 24,
    paddingVertical: 16,
    minHeight: 48,
  },
  medium: {
    paddingHorizontal: 20,
    paddingVertical: 12,
    minHeight: 40,
  },
  small: {
    paddingHorizontal: 16,
    paddingVertical: 8,
    minHeight: 32,
  },
  disabled: {
    opacity: 0.38,
  },
  content: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
  },
  icon: {
    marginRight: 8,
  },
  text: {
    textAlign: 'center',
  },
  filledText: {
    color: AndroidColors.onPrimary,
    ...AndroidTypography.labelLarge,
  },
  outlinedText: {
    color: AndroidColors.primary,
    ...AndroidTypography.labelLarge,
  },
  textText: {
    color: AndroidColors.primary,
    ...AndroidTypography.labelLarge,
  },
  elevatedText: {
    color: AndroidColors.primary,
    ...AndroidTypography.labelLarge,
  },
  tonalText: {
    color: AndroidColors.onSecondaryContainer,
    ...AndroidTypography.labelLarge,
  },
  largeText: {
    ...AndroidTypography.titleMedium,
  },
  mediumText: {
    ...AndroidTypography.labelLarge,
  },
  smallText: {
    ...AndroidTypography.labelMedium,
  },
});
```

#### Android Status Bar Configuration
```typescript
// packages/ui-mobile/src/components/android/AndroidStatusBar.tsx
import React from 'react';
import { StatusBar } from 'expo-status-bar';
import { Platform } from 'react-native';
import { AndroidColors } from '../../theme';

interface AndroidStatusBarProps {
  backgroundColor?: string;
  style?: 'light' | 'dark' | 'auto';
}

export const AndroidStatusBar: React.FC<AndroidStatusBarProps> = ({
  backgroundColor = AndroidColors.surface,
  style = 'auto',
}) => {
  if (Platform.OS !== 'android') return null;

  return (
    <StatusBar
      style={style}
      backgroundColor={backgroundColor}
      translucent={false}
    />
  );
};
```

### 5. Android Performance Optimization

#### Android-Specific Image Optimization
```typescript
// packages/ui-mobile/src/components/android/OptimizedImage.tsx
import React from 'react';
import { Image } from 'expo-image';
import { ViewStyle, Platform } from 'react-native';

interface OptimizedImageProps {
  source: string;
  style?: ViewStyle;
  placeholder?: string;
  contentFit?: 'cover' | 'contain' | 'fill';
}

export const OptimizedImage: React.FC<OptimizedImageProps> = ({
  source,
  style,
  placeholder,
  contentFit = 'cover',
}) => {
  const androidOptimizations = Platform.OS === 'android' ? {
    allowDownscaling: true,
    cachePolicy: 'memory-disk' as const,
    priority: 'high' as const,
  } : {};

  return (
    <Image
      source={{ uri: source }}
      style={style}
      placeholder={placeholder}
      contentFit={contentFit}
      transition={200}
      {...androidOptimizations}
    />
  );
};
```

#### Memory Management for Android
```typescript
// packages/shared/utils/android-memory.ts
import { Platform, AppState } from 'react-native';

export class AndroidMemoryManager {
  private static memoryWarningThreshold = 150; // MB

  static async checkMemoryUsage(): Promise<number> {
    if (Platform.OS !== 'android') return 0;
    
    // Implementation would depend on native module
    // This is a placeholder for memory monitoring
    return 0;
  }

  static setupMemoryWarnings(): void {
    if (Platform.OS !== 'android') return;

    AppState.addEventListener('memoryWarning', () => {
      console.warn('Memory warning received - clearing caches');
      // Clear image caches, temporary data, etc.
    });
  }

  static async clearCaches(): Promise<void> {
    if (Platform.OS !== 'android') return;
    
    // Clear various caches
    // Implementation would clear:
    // - Image cache
    // - Network cache
    // - Temporary files
  }
}
```

### 6. Android Testing & Quality Assurance

#### Android-Specific Test Configuration
```typescript
// apps/mobile/__tests__/android/setup.ts
import 'react-native-gesture-handler/jestSetup';

// Mock Android-specific modules
jest.mock('expo-secure-store', () => ({
  getItemAsync: jest.fn(),
  setItemAsync: jest.fn(),
  deleteItemAsync: jest.fn(),
}));

jest.mock('expo-local-authentication', () => ({
  hasHardwareAsync: jest.fn(() => Promise.resolve(true)),
  isEnrolledAsync: jest.fn(() => Promise.resolve(true)),
  supportedAuthenticationTypesAsync: jest.fn(() => Promise.resolve([1, 2])),
  authenticateAsync: jest.fn(() => Promise.resolve({ success: true })),
}));

jest.mock('react-native-paper', () => ({
  TouchableRipple: 'TouchableRipple',
  Provider: 'Provider',
}));

// Mock Android-specific APIs
jest.mock('react-native', () => {
  const RN = jest.requireActual('react-native');
  return {
    ...RN,
    Platform: {
      ...RN.Platform,
      OS: 'android',
      Version: 30,
    },
  };
});
```

### 7. Android Build & Deployment

#### EAS Build Configuration for Android
```json
// apps/mobile/eas.json
{
  "cli": {
    "version": ">= 5.2.0"
  },
  "build": {
    "development": {
      "developmentClient": true,
      "distribution": "internal",
      "android": {
        "buildType": "apk"
      }
    },
    "preview": {
      "distribution": "internal",
      "android": {
        "buildType": "apk"
      }
    },
    "production": {
      "android": {
        "buildType": "aab"
      }
    }
  },
  "submit": {
    "production": {
      "android": {
        "serviceAccountKeyPath": "./service-account-key.json",
        "track": "internal"
      }
    }
  }
}
```

#### Android Gradle Configuration
```gradle
// apps/mobile/android/app/build.gradle (if ejected)
android {
    compileSdkVersion 34
    buildToolsVersion "34.0.0"
    
    defaultConfig {
        applicationId "com.civicsense.app"
        minSdkVersion 21
        targetSdkVersion 34
        versionCode 1
        versionName "1.0.0"
        
        // Enable multidex for large apps
        multiDexEnabled true
        
        // Proguard configuration
        proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
    }
    
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    
    // Bundle configuration
    bundle {
        language {
            enableSplit = false
        }
        density {
            enableSplit = true
        }
        abi {
            enableSplit = true
        }
    }
}
```

## 🔒 Android Security Requirements

### 1. Secure Storage
- ALWAYS use `expo-secure-store` for sensitive data on Android
- Enable `requireAuthentication: true` for biometric-protected storage
- Use Android Keystore for cryptographic operations

### 2. Network Security Configuration
```xml
<!-- apps/mobile/android/app/src/main/res/xml/network_security_config.xml -->
<?xml version="1.0" encoding="utf-8"?>
<network-security-config>
    <domain-config cleartextTrafficPermitted="false">
        <domain includeSubdomains="true">civicsense.com</domain>
        <domain includeSubdomains="true">api.civicsense.com</domain>
        <pin-set expiration="2025-12-31">
            <pin digest="SHA-256">sha256-hash-of-certificate</pin>
        </pin-set>
    </domain-config>
</network-security-config>
```

### 3. App Permissions Management
```typescript
// packages/shared/permissions/android-permissions.ts
import * as Permissions from 'expo-permissions';
import { Platform } from 'react-native';

export class AndroidPermissions {
  static async requestCameraPermission(): Promise<boolean> {
    if (Platform.OS !== 'android') return true;
    
    const { status } = await Permissions.askAsync(Permissions.CAMERA);
    return status === 'granted';
  }

  static async requestStoragePermission(): Promise<boolean> {
    if (Platform.OS !== 'android') return true;
    
    const { status } = await Permissions.askAsync(Permissions.MEDIA_LIBRARY);
    return status === 'granted';
  }

  static async checkPermissionStatus(permission: string): Promise<string> {
    const { status } = await Permissions.getAsync(permission as any);
    return status;
  }
}
```

## 📊 Android Performance Targets

### Metrics to Monitor
- **App Launch Time**: < 500ms cold start
- **Memory Usage**: < 200MB baseline (varies by device)
- **Battery Impact**: Minimal background usage
- **APK Size**: < 50MB (AAB can be larger)
- **Crash Rate**: < 0.1%

### Android-Specific Optimizations
- Use `React.memo()` and `useMemo()` for expensive operations
- Implement proper RecyclerView patterns with FlatList
- Use Android-specific image formats (WebP)
- Optimize for different screen densities
- Handle Android back button properly

## 🧪 Android Development Workflow

```bash
# Development commands
npm run android:dev          # Start Android emulator
npm run android:device       # Run on connected Android device
npm run android:build:dev    # Build development APK
npm run android:build:prod   # Build production AAB
npm run android:test         # Run Android-specific tests
npm run android:analyze      # Analyze bundle size
```

## ✅ Android Quality Checklist

Before each Android release:
- [ ] Test on multiple Android versions (API 21+)
- [ ] Verify biometric authentication works
- [ ] Test Google Sign In flow
- [ ] Validate Play Store guidelines compliance
- [ ] Check accessibility with TalkBack
- [ ] Test on different screen sizes/densities
- [ ] Verify deep linking works
- [ ] Test push notifications
- [ ] Validate memory usage on low-end devices
- [ ] Check for ANRs (Application Not Responding)
- [ ] Test offline functionality
- [ ] Verify proper back button handling
- [ ] Test app bundle size optimization

## 🎨 Android Material Design Guidelines

### Component Usage Priorities
1. **Use Material Design 3 components** from react-native-paper
2. **Follow Android accessibility guidelines** (minimum 48dp touch targets)
3. **Implement proper elevation** for layered UI
4. **Use appropriate motion** (shared element transitions)
5. **Support dark theme** automatically

### Android-Specific UX Patterns
- **Navigation**: Use bottom navigation or navigation drawer
- **Back Button**: Always handle Android back button properly
- **Floating Action Button**: Use for primary actions
- **Snackbars**: For brief messages and actions
- **Bottom Sheets**: For contextual actions

---

*Always follow Material Design Guidelines and ensure compliance with Google Play Store policies*
