-- ============================================================================
-- ADD AI METADATA FIELDS TO QUESTION_TOPICS TABLE
-- Migration: 20250621_add_ai_metadata_to_question_topics.sql
-- Purpose: Add AI generation tracking and source analysis fields
-- ============================================================================

BEGIN;

-- Add AI metadata fields to question_topics table
ALTER TABLE question_topics 
ADD COLUMN IF NOT EXISTS ai_extraction_metadata JSONB,
ADD COLUMN IF NOT EXISTS source_analysis_id TEXT,
ADD COLUMN IF NOT EXISTS ai_generated BOOLEAN DEFAULT FALSE,
ADD COLUMN IF NOT EXISTS ai_model_used TEXT,
ADD COLUMN IF NOT EXISTS ai_generation_method TEXT,
ADD COLUMN IF NOT EXISTS ai_quality_score INTEGER CHECK (ai_quality_score >= 0 AND ai_quality_score <= 100),
ADD COLUMN IF NOT EXISTS source_credibility_score INTEGER CHECK (source_credibility_score >= 0 AND source_credibility_score <= 100),
ADD COLUMN IF NOT EXISTS content_package_id TEXT;

-- Add comments for documentation
COMMENT ON COLUMN question_topics.ai_extraction_metadata IS 'JSON metadata about AI content generation process including model, prompts, and analysis';
COMMENT ON COLUMN question_topics.source_analysis_id IS 'Reference to the source analysis that triggered this content generation';
COMMENT ON COLUMN question_topics.ai_generated IS 'Whether this topic was generated by AI vs. human-created';
COMMENT ON COLUMN question_topics.ai_model_used IS 'AI model used for generation (e.g., gpt-4, claude-3-opus)';
COMMENT ON COLUMN question_topics.ai_generation_method IS 'Method used for generation (e.g., news_analysis, scheduled_generation)';
COMMENT ON COLUMN question_topics.ai_quality_score IS 'Overall quality score from AI content assessment (0-100)';
COMMENT ON COLUMN question_topics.source_credibility_score IS 'Credibility score of the source material used (0-100)';
COMMENT ON COLUMN question_topics.content_package_id IS 'Reference to the content package this topic was generated as part of';

-- Create indexes for efficient querying
CREATE INDEX IF NOT EXISTS idx_question_topics_ai_generated 
ON question_topics(ai_generated) WHERE ai_generated = true;

CREATE INDEX IF NOT EXISTS idx_question_topics_ai_quality_score 
ON question_topics(ai_quality_score) WHERE ai_quality_score IS NOT NULL;

CREATE INDEX IF NOT EXISTS idx_question_topics_content_package_id 
ON question_topics(content_package_id) WHERE content_package_id IS NOT NULL;

CREATE INDEX IF NOT EXISTS idx_question_topics_source_analysis_id 
ON question_topics(source_analysis_id) WHERE source_analysis_id IS NOT NULL;

-- Create GIN index for ai_extraction_metadata JSONB field
CREATE INDEX IF NOT EXISTS idx_question_topics_ai_extraction_metadata 
ON question_topics USING GIN (ai_extraction_metadata);

-- Add function to validate ai_extraction_metadata structure
CREATE OR REPLACE FUNCTION validate_ai_extraction_metadata()
RETURNS TRIGGER AS $$
BEGIN
  -- Only validate if ai_extraction_metadata is not null
  IF NEW.ai_extraction_metadata IS NOT NULL THEN
    -- Check for required top-level fields for AI-generated content
    IF NEW.ai_generated = true THEN
      IF NOT (
        NEW.ai_extraction_metadata ? 'generated_at' AND
        NEW.ai_extraction_metadata ? 'ai_model' AND
        NEW.ai_extraction_metadata ? 'generation_method'
      ) THEN
        RAISE EXCEPTION 'ai_extraction_metadata for AI-generated content must contain: generated_at, ai_model, generation_method';
      END IF;
    END IF;
    
    -- Validate source information if present
    IF NEW.ai_extraction_metadata ? 'source_url' THEN
      IF NOT (NEW.ai_extraction_metadata->>'source_url' ~ '^https?://') THEN
        RAISE EXCEPTION 'source_url in ai_extraction_metadata must be a valid HTTP(S) URL';
      END IF;
    END IF;
    
    -- Validate quality scores if present
    IF NEW.ai_extraction_metadata ? 'quality_scores' THEN
      IF NOT (jsonb_typeof(NEW.ai_extraction_metadata->'quality_scores') = 'object') THEN
        RAISE EXCEPTION 'quality_scores in ai_extraction_metadata must be an object';
      END IF;
    END IF;
  END IF;
  
  -- Consistency checks
  IF NEW.ai_generated = true AND NEW.ai_model_used IS NULL THEN
    RAISE EXCEPTION 'ai_model_used must be specified for AI-generated content';
  END IF;
  
  IF NEW.ai_generated = true AND NEW.ai_generation_method IS NULL THEN
    RAISE EXCEPTION 'ai_generation_method must be specified for AI-generated content';
  END IF;
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create trigger for ai_extraction_metadata validation
DROP TRIGGER IF EXISTS validate_ai_extraction_metadata_trigger ON question_topics;
CREATE TRIGGER validate_ai_extraction_metadata_trigger
  BEFORE INSERT OR UPDATE ON question_topics
  FOR EACH ROW
  EXECUTE FUNCTION validate_ai_extraction_metadata();

-- Update the existing key_takeaways validation function to work alongside ai_extraction_metadata
CREATE OR REPLACE FUNCTION validate_key_takeaways()
RETURNS TRIGGER AS $$
BEGIN
  -- Check if key_takeaways is not null and has required fields
  IF NEW.key_takeaways IS NOT NULL THEN
    IF NOT (
      NEW.key_takeaways ? 'core_facts' AND
      NEW.key_takeaways ? 'uncomfortable_truths' AND
      NEW.key_takeaways ? 'power_dynamics' AND
      NEW.key_takeaways ? 'specific_actors' AND
      NEW.key_takeaways ? 'actionable_insights' AND
      NEW.key_takeaways ? 'precedent_implications'
    ) THEN
      RAISE EXCEPTION 'key_takeaways must contain all required fields';
    END IF;
  END IF;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create view for AI-generated topics with metadata
CREATE OR REPLACE VIEW ai_generated_topics AS
SELECT 
  topic_id,
  topic_title,
  description,
  why_this_matters,
  emoji,
  date,
  categories,
  ai_model_used,
  ai_generation_method,
  ai_quality_score,
  source_credibility_score,
  content_package_id,
  ai_extraction_metadata->>'generated_at' as generated_at,
  ai_extraction_metadata->>'source_url' as source_url,
  ai_extraction_metadata->>'source_domain' as source_domain,
  ai_extraction_metadata->'quality_scores'->>'overall' as overall_quality,
  ai_extraction_metadata->'quality_scores'->>'brand_voice_compliance' as brand_voice_score,
  ai_extraction_metadata->'quality_scores'->>'factual_accuracy' as accuracy_score,
  ai_extraction_metadata->'quality_scores'->>'civic_actionability' as actionability_score,
  created_at,
  updated_at
FROM question_topics 
WHERE ai_generated = true;

-- Add RLS policy for AI metadata (admins only can see AI generation details)
CREATE POLICY "AI metadata visible to admins only" ON question_topics
FOR SELECT USING (
  -- Public can see the content but not AI metadata
  CASE 
    WHEN current_setting('request.jwt.claims', true)::json->>'role' = 'admin' THEN true
    ELSE ai_extraction_metadata IS NULL AND source_analysis_id IS NULL
  END
);

-- Update existing policies to handle the new fields
-- Note: This assumes there are existing RLS policies on question_topics

COMMIT;

-- ============================================================================
-- EXAMPLE USAGE AND DOCUMENTATION
-- ============================================================================

/*
Example of inserting a topic with AI metadata:

INSERT INTO question_topics (
  topic_id,
  topic_title,
  description,
  why_this_matters,
  emoji,
  categories,
  ai_generated,
  ai_model_used,
  ai_generation_method,
  ai_quality_score,
  source_credibility_score,
  content_package_id,
  ai_extraction_metadata
) VALUES (
  'example-ai-topic-2025',
  'How AI Policy Actually Works: Breaking Down Government AI Regulation',
  'Recent AI legislation reveals how tech lobbying shapes policy behind closed doors.',
  '<ul><li><strong>Your Data Rights:</strong> New AI laws affect how your personal data is used</li></ul>',
  'ðŸ¤–',
  '["AI Governance", "Technology Policy"]',
  true,
  'gpt-4o',
  'news_analysis',
  85,
  78,
  'pkg_12345_abc123',
  '{
    "generated_at": "2025-06-21T10:30:00Z",
    "ai_model": "gpt-4o",
    "generation_method": "news_analysis",
    "source_url": "https://example.com/ai-policy-news",
    "source_domain": "example.com",
    "source_credibility": 78,
    "quality_scores": {
      "overall": 85,
      "brand_voice_compliance": 88,
      "factual_accuracy": 82,
      "civic_actionability": 85,
      "readability": 90
    },
    "generation_options": {
      "questionsPerTopic": 15,
      "difficultyDistribution": {"easy": 0.33, "medium": 0.40, "hard": 0.27}
    },
    "content_analysis": {
      "civic_relevance_score": 85,
      "power_dynamics_identified": ["tech_lobbying", "regulatory_capture"],
      "uncomfortable_truths": ["AI regulation written by tech companies themselves"],
      "actionable_steps": ["Contact your representative about AI oversight"]
    }
  }'::jsonb
);

Example queries:

-- Get all AI-generated topics with quality scores
SELECT topic_id, topic_title, ai_quality_score, ai_model_used 
FROM question_topics 
WHERE ai_generated = true 
ORDER BY ai_quality_score DESC;

-- Get topics from a specific content package
SELECT topic_id, topic_title, content_package_id
FROM question_topics 
WHERE content_package_id = 'pkg_12345_abc123';

-- Get topics generated from high-credibility sources
SELECT topic_id, topic_title, source_credibility_score
FROM question_topics 
WHERE source_credibility_score >= 80;

-- Get AI generation statistics
SELECT 
  ai_model_used,
  ai_generation_method,
  COUNT(*) as topics_generated,
  AVG(ai_quality_score) as avg_quality_score,
  AVG(source_credibility_score) as avg_source_credibility
FROM question_topics 
WHERE ai_generated = true 
GROUP BY ai_model_used, ai_generation_method;

-- Use the view for simplified AI topic querying
SELECT * FROM ai_generated_topics 
WHERE overall_quality::int >= 80
ORDER BY generated_at::timestamp DESC;
*/ 