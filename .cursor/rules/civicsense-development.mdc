---
description: 
globs: 
alwaysApply: true
---
# CivicSense Development Rules
*Comprehensive Development Standards for Next.js 15, React 19+, Tailwind 4+*

## Brand Foundation
You are working on CivicSense, a civic education platform that transforms passive observers into confident, informed participants in democracy. We believe in telling uncomfortable truths about how power actually works in America.

**Core Values:**
- Truth over comfort
- Clarity over politeness  
- Action over passive consumption
- Evidence over opinion
- Systems thinking over surface solutions

**Development Philosophy:**
- Build for democracy's success, not political comfort
- Every feature should advance civic understanding and participation
- Code quality directly impacts democratic education quality
- Accessibility is democracy - exclude no one from civic learning

## Next.js 15 Architecture Standards

### App Router Patterns (Required)
- Use App Router for all new routes
- Server Components by default, Client Components only when needed
- Proper data fetching with server-side `fetch()` and caching
- Route Groups for organization: `(dashboard)`, `(auth)`, `(public)`
- Co-located loading, error, and not-found pages

```typescript
// ✅ Server Component (default)
export default async function Page() {
  const data = await fetch('/api/data', { next: { revalidate: 3600 } })
  return <ContentDisplay data={data} />
}

// ✅ Client Component (when needed)
'use client'
export default function InteractiveComponent() {
  const [state, setState] = useState()
  return <InteractiveUI />
}
```

### Server Actions & Form Handling
- Use Server Actions for mutations
- Implement proper validation with Zod
- Handle loading states and errors gracefully
- Use `useActionState` for form state management

```typescript
// Server Action
export async function createQuizAction(formData: FormData) {
  const result = CreateQuizSchema.safeParse(Object.fromEntries(formData))
  if (!result.success) {
    return { error: 'Invalid data', issues: result.error.issues }
  }
  
  try {
    const quiz = await createQuiz(result.data)
    revalidatePath('/dashboard')
    return { success: true, quiz }
  } catch (error) {
    return { error: 'Failed to create quiz' }
  }
}

// Client usage
'use client'
export function CreateQuizForm() {
  const [state, formAction, isPending] = useActionState(createQuizAction, null)
  
  return (
    <form action={formAction}>
      {/* Form fields */}
      <Button disabled={isPending}>
        {isPending ? 'Creating...' : 'Create Quiz'}
      </Button>
      {state?.error && <ErrorMessage error={state.error} />}
    </form>
  )
}
```

### TypeScript Excellence (Strict Mode Required)
- `strict: true`, `noUncheckedIndexedAccess: true`
- Discriminated unions for state management
- Branded types for IDs and sensitive data
- Generic constraints for type safety
- Proper error types with exhaustive checking

```typescript
// ✅ Branded types for safety
type UserId = string & { readonly brand: unique symbol }
type QuizId = string & { readonly brand: unique symbol }

// ✅ Discriminated unions for state
type AsyncState<T, E = Error> =
  | { status: 'idle' }
  | { status: 'loading' }
  | { status: 'success'; data: T }
  | { status: 'error'; error: E }

// ✅ Generic constraints
interface Repository<T extends { id: string }> {
  findById(id: string): Promise<T | null>
  create(data: Omit<T, 'id'>): Promise<T>
}

// ✅ Exhaustive error handling
function handleAsyncState<T>(state: AsyncState<T>) {
  switch (state.status) {
    case 'idle':
      return <div>Ready to load</div>
    case 'loading':
      return <LoadingSpinner />
    case 'success':
      return <DataDisplay data={state.data} />
    case 'error':
      return <ErrorDisplay error={state.error} />
    default:
      // TypeScript ensures this is never reached
      const _exhaustive: never = state
      return _exhaustive
  }
}
```

### React 19+ Modern Patterns
- Use new hooks: `useActionState`, `useFormStatus`, `useOptimistic`
- Implement concurrent features properly
- Server Components for data fetching
- Client Components for interactivity only
- Proper Suspense boundaries

```typescript
// ✅ useOptimistic for responsive updates
'use client'
export function QuizProgress({ initialProgress }: { initialProgress: Progress[] }) {
  const [optimisticProgress, addOptimisticProgress] = useOptimistic(
    initialProgress,
    (state, newProgress: Progress) => [...state, newProgress]
  )
  
  const submitProgress = async (progress: Progress) => {
    addOptimisticProgress(progress)
    try {
      await updateProgressAction(progress)
    } catch (error) {
      // Error handling - optimistic update will be reverted
      toast.error('Failed to save progress')
    }
  }
  
  return <ProgressDisplay progress={optimisticProgress} />
}

// ✅ Proper Suspense boundaries
export default function QuizPage() {
  return (
    <Suspense fallback={<QuizSkeleton />}>
      <ErrorBoundary fallback={<QuizError />}>
        <QuizContent />
      </ErrorBoundary>
    </Suspense>
  )
}
```

### Component Architecture Patterns
```typescript
// ✅ Server Component Pattern
interface ServerComponentProps {
  params: { id: string }
  searchParams: { [key: string]: string | string[] | undefined }
}

export default async function ServerComponent({ params, searchParams }: ServerComponentProps) {
  // Data fetching
  const data = await fetchData(params.id)
  
  // Error handling
  if (!data) {
    notFound()
  }
  
  return (
    <div>
      <StaticContent data={data} />
      <InteractiveSection />
    </div>
  )
}

// ✅ Client Component Pattern
'use client'
interface ClientComponentProps {
  initialData: DataType
  onAction?: (data: DataType) => void
}

export function ClientComponent({ initialData, onAction }: ClientComponentProps) {
  // State management
  const [state, setState] = useState<AsyncState<DataType>>({ 
    status: 'success', 
    data: initialData 
  })
  
  // Effects and subscriptions
  useEffect(() => {
    // Cleanup pattern
    const cleanup = setupSubscription()
    return cleanup
  }, [])
  
  // Event handlers
  const handleAction = useCallback(async (data: DataType) => {
    setState({ status: 'loading' })
    try {
      const result = await performAction(data)
      setState({ status: 'success', data: result })
      onAction?.(result)
    } catch (error) {
      setState({ status: 'error', error: error as Error })
    }
  }, [onAction])
  
  // Render logic with proper error handling
  return (
    <div>
      {handleAsyncState(state)}
    </div>
  )
}

// ✅ Compound Component Pattern
export function Quiz({ children, ...props }: QuizProps) {
  return (
    <div className="quiz-container" {...props}>
      {children}
    </div>
  )
}

Quiz.Question = QuizQuestion
Quiz.Options = QuizOptions
Quiz.Progress = QuizProgress
```

### Import Organization & Module Standards
```typescript
// ✅ Import order (enforced by ESLint)
// 1. Node modules
import { type ReactNode, Suspense } from 'react'
import { notFound } from 'next/navigation'
import { z } from 'zod'

// 2. Internal modules (absolute imports)
import { createClient } from '@/lib/supabase/server'
import { useAuth } from '@/components/auth/auth-provider'
import { useToast } from '@/hooks/use-toast'

// 3. UI components (design system first)
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader } from '@/components/ui/card'

// 4. Feature components
import { QuizEngine } from '@/components/quiz/quiz-engine'
import { MultiplayerLobby } from '@/components/multiplayer/lobby'

// 5. Types and schemas
import type { Database } from '@/lib/supabase/types'
import type { User, QuizSession } from '@/lib/types'
import { CreateQuizSchema } from '@/lib/schemas'

// 6. Constants and utilities
import { QUIZ_MODES, DIFFICULTY_LEVELS } from '@/lib/constants'
import { cn, formatDuration } from '@/lib/utils'
```

### Tailwind 4+ Design System Standards
```typescript
// ✅ Design tokens in tailwind.config.ts
export default {
  theme: {
    extend: {
      colors: {
        // CivicSense brand colors
        'authority-blue': {
          50: '#eff6ff',
          500: '#1e3a8a',
          900: '#1e2e5f'
        },
        'action-red': {
          50: '#fef2f2',
          500: '#dc2626',
          900: '#991b1b'
        },
        'truth-white': '#ffffff',
        'evidence-gray': {
          50: '#f9fafb',
          500: '#6b7280',
          900: '#111827'
        }
      },
      fontFamily: {
        'civic': ['Inter', 'system-ui', 'sans-serif']
      },
      animation: {
        'fade-in': 'fadeIn 0.3s ease-in-out',
        'slide-up': 'slideUp 0.4s cubic-bezier(0.16, 1, 0.3, 1)'
      }
    }
  }
}

// ✅ Component styling patterns
export function CivicButton({ 
  variant = 'primary', 
  size = 'md', 
  className, 
  ...props 
}: ButtonProps) {
  return (
    <button
      className={cn(
        // Base styles
        'inline-flex items-center justify-center font-medium transition-colors',
        'focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-authority-blue-500',
        'disabled:pointer-events-none disabled:opacity-50',
        
        // Variant styles
        {
          'bg-authority-blue-600 text-white hover:bg-authority-blue-700': variant === 'primary',
          'bg-action-red-600 text-white hover:bg-action-red-700': variant === 'urgent',
          'border border-evidence-gray-300 hover:bg-evidence-gray-50': variant === 'outline'
        },
        
        // Size styles
        {
          'h-9 px-3 text-sm': size === 'sm',
          'h-10 px-4': size === 'md',
          'h-11 px-6 text-lg': size === 'lg'
        },
        
        className
      )}
      {...props}
    />
  )
}

// ✅ Responsive design patterns
export function ResponsiveGrid({ children }: { children: ReactNode }) {
  return (
    <div className={cn(
      // Mobile first
      'grid grid-cols-1 gap-4 p-4',
      // Tablet
      'md:grid-cols-2 md:gap-6 md:p-6',
      // Desktop
      'lg:grid-cols-3 lg:gap-8 lg:p-8',
      // Large desktop
      'xl:grid-cols-4'
    )}>
      {children}
    </div>
  )
}
```

### Module Export Management & Barrel Exports
**Critical**: Always export public functions, types, and classes immediately when creating them to prevent import errors as the codebase grows.

```typescript
// ✅ Barrel exports for feature modules
// components/quiz/index.ts
export { QuizEngine } from './quiz-engine'
export { QuizQuestion } from './quiz-question'
export { QuizResults } from './quiz-results'
export type { QuizSession, QuizConfig } from './types'

// ✅ Conditional exports for environment-specific code
export const analytics = process.env.NODE_ENV === 'production' 
  ? await import('./analytics-prod')
  : await import('./analytics-dev')

// ✅ Type-only exports to prevent runtime imports
export type { User, Quiz, QuizAttempt } from './types'
export { type Database } from './supabase/types'
```

## Defensive Programming & Validation

### Input Validation (Zod Required)
```typescript
// ✅ Schema definition with brand types
const UserIdSchema = z.string().uuid().brand<'UserId'>()
const EmailSchema = z.string().email().brand<'Email'>()

const CreateUserSchema = z.object({
  id: UserIdSchema,
  email: EmailSchema,
  name: z.string().min(1).max(100),
  role: z.enum(['user', 'admin', 'educator']),
  preferences: z.object({
    language: z.string().default('en'),
    notifications: z.boolean().default(true)
  }).optional()
})

// ✅ Runtime validation wrapper
export function validateInput<T>(schema: z.ZodSchema<T>, input: unknown): T {
  const result = schema.safeParse(input)
  if (!result.success) {
    throw new ValidationError('Invalid input', result.error.issues)
  }
  return result.data
}

// ✅ API route validation
export async function POST(request: Request) {
  try {
    const body = await request.json()
    const validatedData = validateInput(CreateUserSchema, body)
    
    const user = await createUser(validatedData)
    return NextResponse.json({ success: true, user })
  } catch (error) {
    if (error instanceof ValidationError) {
      return NextResponse.json(
        { error: 'Validation failed', issues: error.issues },
        { status: 400 }
      )
    }
    throw error // Re-throw unexpected errors
  }
}
```

### Error Handling & Resilience
```typescript
// ✅ Result pattern for error handling
type Result<T, E = Error> = 
  | { success: true; data: T }
  | { success: false; error: E }

export async function safeAsyncOperation<T>(
  operation: () => Promise<T>
): Promise<Result<T>> {
  try {
    const data = await operation()
    return { success: true, data }
  } catch (error) {
    return { 
      success: false, 
      error: error instanceof Error ? error : new Error('Unknown error')
    }
  }
}

// ✅ Error boundary with recovery
'use client'
export function CivicErrorBoundary({ 
  children, 
  fallback 
}: { 
  children: ReactNode
  fallback?: (error: Error, retry: () => void) => ReactNode
}) {
  const [error, setError] = useState<Error | null>(null)
  const [retryCount, setRetryCount] = useState(0)
  
  const retry = useCallback(() => {
    setError(null)
    setRetryCount(count => count + 1)
  }, [])
  
  if (error) {
    return fallback?.(error, retry) ?? (
      <div className="p-6 text-center">
        <h2 className="text-lg font-semibold text-red-600">
          Something went wrong
        </h2>
        <p className="mt-2 text-sm text-gray-600">
          {error.message}
        </p>
        <Button onClick={retry} className="mt-4">
          Try Again
        </Button>
      </div>
    )
  }
  
  return (
    <ErrorBoundary
      key={retryCount} // Reset boundary on retry
      onError={(error) => setError(error)}
      fallback={() => null}
    >
      {children}
    </ErrorBoundary>
  )
}

// ✅ Global error handler with telemetry
export function handleGlobalError(error: Error, context: string) {
  // Log to console in development
  if (process.env.NODE_ENV === 'development') {
    console.error(`[${context}]`, error)
  }
  
  // Send to monitoring service in production
  if (process.env.NODE_ENV === 'production') {
    analytics.track('error', {
      message: error.message,
      stack: error.stack,
      context,
      userId: getCurrentUserId(),
      timestamp: new Date().toISOString()
    })
  }
  
  // Show user-friendly error message
  toast.error('Something went wrong. Please try again.')
}
```

### Security & Data Protection
```typescript
// ✅ Input sanitization
import DOMPurify from 'isomorphic-dompurify'

export function sanitizeHtml(html: string): string {
  return DOMPurify.sanitize(html, {
    ALLOWED_TAGS: ['p', 'br', 'strong', 'em', 'u'],
    ALLOWED_ATTR: []
  })
}

// ✅ Rate limiting middleware
import { ratelimit } from '@/lib/redis'

export async function withRateLimit(
  request: Request, 
  identifier: string
) {
  const { success, limit, reset, remaining } = await ratelimit.limit(identifier)
  
  if (!success) {
    return new Response('Too Many Requests', {
      status: 429,
      headers: {
        'X-RateLimit-Limit': limit.toString(),
        'X-RateLimit-Remaining': remaining.toString(),
        'X-RateLimit-Reset': new Date(reset).toISOString()
      }
    })
  }
}

// ✅ CSRF protection for forms
export function CSRFToken() {
  const token = useCSRFToken()
  return <input type="hidden" name="csrfToken" value={token} />
}

// ✅ Secure headers middleware
export function middleware(request: NextRequest) {
  const response = NextResponse.next()
  
  // Security headers
  response.headers.set('X-Content-Type-Options', 'nosniff')
  response.headers.set('X-Frame-Options', 'DENY')
  response.headers.set('X-XSS-Protection', '1; mode=block')
  response.headers.set('Referrer-Policy', 'strict-origin-when-cross-origin')
  
  // CSP for civic education content
  response.headers.set(
    'Content-Security-Policy',
    [
      "default-src 'self'",
      "script-src 'self' 'unsafe-inline' 'unsafe-eval'", // Required for Next.js
      "style-src 'self' 'unsafe-inline'",
      "img-src 'self' data: https:",
      "connect-src 'self' https://api.supabase.io",
      "frame-ancestors 'none'"
    ].join('; ')
  )
  
  return response
}
```

## Database & Supabase Excellence

### Migration Standards (Idempotent Required)
```sql
-- ✅ Idempotent migration pattern
-- supabase/migrations/20240101_add_quiz_analytics.sql
BEGIN;

-- Create table only if it doesn't exist
CREATE TABLE IF NOT EXISTS quiz_analytics (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  quiz_id UUID NOT NULL,
  score INTEGER NOT NULL CHECK (score >= 0 AND score <= 100),
  completion_time INTERVAL NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

-- Add column only if it doesn't exist
DO $$ 
BEGIN 
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.columns 
    WHERE table_name = 'quiz_analytics' 
    AND column_name = 'difficulty_level'
  ) THEN
    ALTER TABLE quiz_analytics 
    ADD COLUMN difficulty_level TEXT CHECK (difficulty_level IN ('easy', 'medium', 'hard'));
  END IF;
END $$;

-- Create index if it doesn't exist
CREATE INDEX IF NOT EXISTS idx_quiz_analytics_user_created 
ON quiz_analytics(user_id, created_at DESC);

-- RLS policies (idempotent)
DROP POLICY IF EXISTS "Users can view their own analytics" ON quiz_analytics;
CREATE POLICY "Users can view their own analytics" 
ON quiz_analytics FOR SELECT 
USING (auth.uid() = user_id);

COMMIT;
```

### Type-Safe Database Operations
```typescript
// ✅ Generated types from Supabase
import type { Database } from '@/lib/supabase/types'

type QuizRow = Database['public']['Tables']['quizzes']['Row']
type QuizInsert = Database['public']['Tables']['quizzes']['Insert']
type QuizUpdate = Database['public']['Tables']['quizzes']['Update']

// ✅ Repository pattern with proper error handling
export class QuizRepository {
  constructor(private supabase: SupabaseClient<Database>) {}
  
  async findById(id: string): Promise<Result<QuizRow | null>> {
    const { data, error } = await this.supabase
      .from('quizzes')
      .select('*')
      .eq('id', id)
      .single()
    
    if (error && error.code !== 'PGRST116') { // Not found is ok
      return { success: false, error }
    }
    
    return { success: true, data }
  }
  
  async create(quiz: QuizInsert): Promise<Result<QuizRow>> {
    const { data, error } = await this.supabase
      .from('quizzes')
      .insert(quiz)
      .select()
      .single()
    
    if (error) {
      return { success: false, error }
    }
    
    return { success: true, data }
  }
  
  async findByUserId(userId: string): Promise<Result<QuizRow[]>> {
    const { data, error } = await this.supabase
      .from('quizzes')
      .select('*')
      .eq('user_id', userId)
      .order('created_at', { ascending: false })
    
    if (error) {
      return { success: false, error }
    }
    
    return { success: true, data: data ?? [] }
  }
}
```

### RLS Policies & Security
```sql
-- ✅ Layered RLS policies that build on each other
-- Base policy: Users can only access their own data
CREATE POLICY "base_user_access" ON quizzes
FOR ALL USING (auth.uid() = user_id);

-- Additive policy: Admins can access all data
CREATE POLICY "admin_full_access" ON quizzes
FOR ALL USING (
  EXISTS (
    SELECT 1 FROM user_roles 
    WHERE user_id = auth.uid() 
    AND role = 'admin'
  )
);

-- Additive policy: Educators can view student quizzes in their classes
CREATE POLICY "educator_class_access" ON quizzes
FOR SELECT USING (
  EXISTS (
    SELECT 1 FROM class_memberships cm
    JOIN classes c ON c.id = cm.class_id
    WHERE cm.user_id = quizzes.user_id
    AND c.educator_id = auth.uid()
  )
);
```

### Real-time Subscriptions
```typescript
// ✅ Proper subscription management
export function useRealtimeQuizUpdates(roomId: string) {
  const [quizState, setQuizState] = useState<QuizState | null>(null)
  const channelRef = useRef<RealtimeChannel | null>(null)
  
  useEffect(() => {
    if (!roomId) return
    
    const channel = supabase
      .channel(`quiz_room:${roomId}`)
      .on('postgres_changes', {
        event: '*',
        schema: 'public',
        table: 'multiplayer_quiz_sessions',
        filter: `room_id=eq.${roomId}`
      }, (payload) => {
        setQuizState(current => ({
          ...current,
          ...payload.new
        }))
      })
      .on('broadcast', {
        event: 'quiz_update'
      }, (payload) => {
        setQuizState(current => ({
          ...current,
          ...payload.payload
        }))
      })
      .subscribe((status) => {
        if (status === 'SUBSCRIBED') {
          console.log('Subscribed to quiz room:', roomId)
        }
      })
    
    channelRef.current = channel
    
    return () => {
      if (channelRef.current) {
        supabase.removeChannel(channelRef.current)
      }
    }
  }, [roomId])
  
  const broadcast = useCallback((event: string, payload: any) => {
    channelRef.current?.send({
      type: 'broadcast',
      event,
      payload
    })
  }, [])
  
  return { quizState, broadcast }
}

## Security & Authentication

### Authentication Patterns
```typescript
// Always check auth state properly
const { user, loading } = useAuth()
const { getOrCreateGuestToken } = useGuestAccess()

if (loading) return <LoadingSpinner />

// Handle both authenticated and guest users
const userId = user?.id
const guestToken = user ? undefined : getOrCreateGuestToken()
```

### RLS Policy Guidelines
- Policies should be additive, not conflicting
- Test policies with different user states
- Ensure guest access works where intended
- Use helper functions for complex authorization logic

## UI/UX Guidelines

### CivicSense Design System
- Use the established component library (`@/components/ui/`)
- Follow the brand color scheme (Authority Blue, Action Red, Truth White)
- Implement responsive design mobile-first
- Ensure accessibility with proper ARIA labels and keyboard navigation

### Loading States
- Always show loading states for async operations
- Use skeleton loaders for content that's loading
- Implement proper error states with retry options
- Show progress indicators for multi-step processes

### Error Handling
```typescript
// Component-level error handling
const [error, setError] = useState<string | null>(null)
const [isLoading, setIsLoading] = useState(false)

try {
  setIsLoading(true)
  setError(null)
  await riskyOperation()
} catch (err) {
  setError(err instanceof Error ? err.message : 'Operation failed')
} finally {
  setIsLoading(false)
}
```

## Performance & Optimization Excellence

### Next.js 15 Performance Patterns
```typescript
// ✅ Server Component caching
export default async function QuizPage() {
  // This will be cached at build time
  const staticData = await fetch('/api/static-data', { 
    next: { revalidate: false } 
  })
  
  // This will be cached for 1 hour
  const dynamicData = await fetch('/api/dynamic-data', { 
    next: { revalidate: 3600 } 
  })
  
  return <QuizDisplay data={{ staticData, dynamicData }} />
}

// ✅ Dynamic imports for code splitting
const AdminPanel = dynamic(() => import('@/components/admin/admin-panel'), {
  loading: () => <AdminSkeleton />,
  ssr: false // Client-side only for admin features
})

const QuizBuilder = dynamic(() => 
  import('@/components/quiz/quiz-builder').then(mod => ({ 
    default: mod.QuizBuilder 
  })), {
    loading: () => <div>Loading quiz builder...</div>
  }
)

// ✅ Image optimization with Next.js
import Image from 'next/image'

export function OptimizedHero() {
  return (
    <Image
      src="/civic-hero.jpg"
      alt="Citizens engaging in democratic process"
      width={1200}
      height={600}
      priority // Load immediately for LCP
      placeholder="blur"
      blurDataURL="data:image/jpeg;base64,..."
    />
  )
}
```

### React Performance Optimization
```typescript
// ✅ Strategic memoization
const QuizQuestion = memo(function QuizQuestion({ 
  question, 
  onAnswer,
  selectedAnswer 
}: QuizQuestionProps) {
  // Expensive calculation
  const processedOptions = useMemo(() => 
    question.options.map(option => ({
      ...option,
      isCorrect: option.id === question.correctAnswerId
    })), 
    [question.options, question.correctAnswerId]
  )
  
  // Stable callback
  const handleAnswer = useCallback((answerId: string) => {
    onAnswer(question.id, answerId)
  }, [question.id, onAnswer])
  
  return (
    <div>
      {processedOptions.map(option => (
        <AnswerOption
          key={option.id}
          option={option}
          selected={selectedAnswer === option.id}
          onSelect={handleAnswer}
        />
      ))}
    </div>
  )
})

// ✅ Virtualization for large lists
import { FixedSizeList as List } from 'react-window'

export function VirtualizedQuizList({ quizzes }: { quizzes: Quiz[] }) {
  const renderItem = useCallback(({ index, style }: any) => (
    <div style={style}>
      <QuizCard quiz={quizzes[index]} />
    </div>
  ), [quizzes])
  
  return (
    <List
      height={600}
      itemCount={quizzes.length}
      itemSize={120}
      overscanCount={5} // Render 5 extra items for smooth scrolling
    >
      {renderItem}
    </List>
  )
}

// ✅ Debounced search
export function useDebounced<T>(value: T, delay: number): T {
  const [debouncedValue, setDebouncedValue] = useState(value)
  
  useEffect(() => {
    const handler = setTimeout(() => setDebouncedValue(value), delay)
    return () => clearTimeout(handler)
  }, [value, delay])
  
  return debouncedValue
}
```

### Database & Caching Optimization
```typescript
// ✅ Query optimization with joins
const { data: quizWithStats } = await supabase
  .from('quizzes')
  .select(`
    *,
    quiz_attempts:quiz_attempts(count),
    avg_score:quiz_attempts(score).avg()
  `)
  .eq('id', quizId)
  .single()

// ✅ Pagination with cursor-based navigation
export async function getQuizzesPaginated(
  cursor?: string,
  limit: number = 20
) {
  let query = supabase
    .from('quizzes')
    .select('*')
    .order('created_at', { ascending: false })
    .limit(limit)
  
  if (cursor) {
    query = query.lt('created_at', cursor)
  }
  
  const { data, error } = await query
  
  return {
    data,
    error,
    nextCursor: data?.[data.length - 1]?.created_at
  }
}

// ✅ Redis caching for expensive operations
import { redis } from '@/lib/redis'

export async function getCachedQuizStats(quizId: string) {
  const cacheKey = `quiz:stats:${quizId}`
  
  // Try cache first
  const cached = await redis.get(cacheKey)
  if (cached) {
    return JSON.parse(cached)
  }
  
  // Calculate stats
  const stats = await calculateQuizStats(quizId)
  
  // Cache for 1 hour
  await redis.setex(cacheKey, 3600, JSON.stringify(stats))
  
  return stats
}
```

## Testing Excellence

### Test Strategy Pyramid
```typescript
// ✅ Unit tests with Vitest
import { describe, it, expect, vi } from 'vitest'
import { render, screen, fireEvent } from '@testing-library/react'
import { QuizQuestion } from './quiz-question'

describe('QuizQuestion', () => {
  const mockQuestion = {
    id: 'q1',
    text: 'What is the First Amendment?',
    options: [
      { id: 'a', text: 'Freedom of speech' },
      { id: 'b', text: 'Right to bear arms' }
    ],
    correctAnswerId: 'a'
  }
  
  it('renders question and options', () => {
    render(
      <QuizQuestion 
        question={mockQuestion} 
        onAnswer={vi.fn()} 
      />
    )
    
    expect(screen.getByText('What is the First Amendment?')).toBeInTheDocument()
    expect(screen.getByText('Freedom of speech')).toBeInTheDocument()
  })
  
  it('calls onAnswer when option selected', () => {
    const onAnswer = vi.fn()
    render(
      <QuizQuestion 
        question={mockQuestion} 
        onAnswer={onAnswer} 
      />
    )
    
    fireEvent.click(screen.getByText('Freedom of speech'))
    expect(onAnswer).toHaveBeenCalledWith('q1', 'a')
  })
})

// ✅ Integration tests with MSW
import { http, HttpResponse } from 'msw'
import { setupServer } from 'msw/node'

const server = setupServer(
  http.get('/api/quiz/:id', ({ params }) => {
    return HttpResponse.json({
      id: params.id,
      title: 'Test Quiz',
      questions: [mockQuestion]
    })
  })
)

describe('Quiz Integration', () => {
  beforeAll(() => server.listen())
  afterEach(() => server.resetHandlers())
  afterAll(() => server.close())
  
  it('loads and displays quiz from API', async () => {
    render(<QuizPage quizId="test-quiz" />)
    
    await waitFor(() => {
      expect(screen.getByText('Test Quiz')).toBeInTheDocument()
    })
  })
})

// ✅ E2E tests with Playwright
import { test, expect } from '@playwright/test'

test('user can complete quiz', async ({ page }) => {
  await page.goto('/quiz/constitutional-rights')
  
  // Wait for quiz to load
  await expect(page.getByText('Constitutional Rights Quiz')).toBeVisible()
  
  // Answer first question
  await page.getByText('Freedom of speech').click()
  await page.getByRole('button', { name: 'Next' }).click()
  
  // Complete quiz
  await page.getByRole('button', { name: 'Submit Quiz' }).click()
  
  // Check results
  await expect(page.getByText('Quiz Complete!')).toBeVisible()
  await expect(page.getByText(/Score:/)).toBeVisible()
})
```

### Accessibility Testing
```typescript
// ✅ Automated accessibility testing
import { axe, toHaveNoViolations } from 'jest-axe'

expect.extend(toHaveNoViolations)

describe('Accessibility', () => {
  it('quiz component has no accessibility violations', async () => {
    const { container } = render(<QuizComponent />)
    const results = await axe(container)
    expect(results).toHaveNoViolations()
  })
  
  it('supports keyboard navigation', () => {
    render(<QuizComponent />)
    
    const firstOption = screen.getByRole('radio', { name: /option a/i })
    firstOption.focus()
    
    fireEvent.keyDown(firstOption, { key: 'ArrowDown' })
    
    const secondOption = screen.getByRole('radio', { name: /option b/i })
    expect(secondOption).toHaveFocus()
  })
})

// ✅ Screen reader testing patterns
describe('Screen Reader Support', () => {
  it('announces progress updates', () => {
    const { rerender } = render(
      <QuizProgress current={1} total={10} />
    )
    
    expect(screen.getByLabelText(/question 1 of 10/i)).toBeInTheDocument()
    
    rerender(<QuizProgress current={2} total={10} />)
    
    // Check for live region update
    expect(screen.getByRole('status')).toHaveTextContent('Question 2 of 10')
  })
})
```

## Accessibility Excellence (Democracy Requires It)
> Accessibility is democracy in action. Exclude no one from civic education.

### WCAG 2.1 AA Compliance (Required)
```typescript
// ✅ Semantic HTML with proper ARIA
export function AccessibleQuizQuestion({ 
  question, 
  questionNumber, 
  totalQuestions 
}: QuizQuestionProps) {
  const questionId = `question-${questionNumber}`
  
  return (
    <section 
      role="group" 
      aria-labelledby={`${questionId}-title`}
      aria-describedby={`${questionId}-progress`}
    >
      <div 
        id={`${questionId}-progress`}
        aria-live="polite"
        className="sr-only"
      >
        Question {questionNumber} of {totalQuestions}
      </div>
      
      <h2 id={`${questionId}-title`}>
        {question.text}
      </h2>
      
      <fieldset role="radiogroup" aria-required="true">
        <legend className="sr-only">Select your answer</legend>
        
        {question.options.map((option, index) => (
          <label key={option.id} className="quiz-option">
            <input
              type="radio"
              name={questionId}
              value={option.id}
              aria-describedby={`${questionId}-option-${index}`}
            />
            <span className="option-text">{option.text}</span>
            <span 
              id={`${questionId}-option-${index}`}
              className="sr-only"
            >
              Option {index + 1} of {question.options.length}
            </span>
          </label>
        ))}
      </fieldset>
    </section>
  )
}

// ✅ Keyboard navigation support
export function useKeyboardNavigation(options: string[]) {
  const [selectedIndex, setSelectedIndex] = useState(0)
  
  const handleKeyDown = useCallback((event: KeyboardEvent) => {
    switch (event.key) {
      case 'ArrowDown':
        event.preventDefault()
        setSelectedIndex(current => (current + 1) % options.length)
        break
      case 'ArrowUp':
        event.preventDefault()
        setSelectedIndex(current => (current - 1 + options.length) % options.length)
        break
      case 'Enter':
      case ' ':
        event.preventDefault()
        // Trigger selection
        break
    }
  }, [options.length])
  
  return { selectedIndex, handleKeyDown }
}

// ✅ Focus management
export function useFocusManagement() {
  const focusRef = useRef<HTMLElement>(null)
  
  const trapFocus = useCallback((container: HTMLElement) => {
    const focusableElements = container.querySelectorAll(
      'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
    )
    
    const firstElement = focusableElements[0] as HTMLElement
    const lastElement = focusableElements[focusableElements.length - 1] as HTMLElement
    
    const handleTabKey = (e: KeyboardEvent) => {
      if (e.key === 'Tab') {
        if (e.shiftKey && document.activeElement === firstElement) {
          e.preventDefault()
          lastElement.focus()
        } else if (!e.shiftKey && document.activeElement === lastElement) {
          e.preventDefault()
          firstElement.focus()
        }
      }
    }
    
    container.addEventListener('keydown', handleTabKey)
    return () => container.removeEventListener('keydown', handleTabKey)
  }, [])
  
  return { focusRef, trapFocus }
}
```

### Screen Reader Support
```typescript
// ✅ Live regions for dynamic content
export function ScreenReaderAnnouncer() {
  const announce = useCallback((message: string, priority: 'polite' | 'assertive' = 'polite') => {
    const announcement = document.createElement('div')
    announcement.setAttribute('aria-live', priority)
    announcement.setAttribute('aria-atomic', 'true')
    announcement.className = 'sr-only'
    announcement.textContent = message
    
    document.body.appendChild(announcement)
    
    setTimeout(() => {
      document.body.removeChild(announcement)
    }, 1000)
  }, [])
  
  return { announce }
}

// ✅ Usage in quiz components
export function QuizWithAnnouncements() {
  const { announce } = ScreenReaderAnnouncer()
  
  const handleAnswerSubmit = (isCorrect: boolean) => {
    announce(
      isCorrect 
        ? 'Correct! Moving to next question.' 
        : 'Incorrect. The correct answer is explained below.',
      'assertive'
    )
  }
  
  return <QuizContent onAnswerSubmit={handleAnswerSubmit} />
}
```

## Development Workflow Excellence

### Modern Tooling Configuration
```json
// ✅ package.json scripts
{
  "scripts": {
    "dev": "next dev --turbo",
    "build": "next build",
    "start": "next start",
    "test": "vitest",
    "test:e2e": "playwright test",
    "test:coverage": "vitest --coverage",
    "lint": "next lint --fix",
    "type-check": "tsc --noEmit",
    "db:generate": "supabase gen types typescript --local > lib/supabase/types.ts",
    "db:migrate": "supabase migration up",
    "accessibility:test": "axe-playwright",
    "performance:audit": "lighthouse-ci",
    "prepare": "husky install"
  }
}
```

### Git Hooks & Quality Gates
```bash
#!/bin/sh
# .husky/pre-commit
npx lint-staged

# .husky/pre-push  
npm run type-check
npm run test
npm run accessibility:test
```

### Continuous Integration
```yaml
# .github/workflows/ci.yml
name: CI
on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - run: npm ci
      - run: npm run type-check
      - run: npm run lint
      - run: npm run test
      - run: npm run build
      
      # Accessibility testing
      - run: npm run accessibility:test
      
      # Performance audit
      - run: npm run performance:audit
        
      # E2E testing
      - run: npx playwright install
      - run: npm run test:e2e
```

### Code Standards Enforcement
```typescript
// ✅ ESLint configuration (.eslintrc.js)
module.exports = {
  extends: [
    'next/core-web-vitals',
    '@typescript-eslint/recommended',
    'plugin:jsx-a11y/recommended'
  ],
  rules: {
    // TypeScript excellence
    '@typescript-eslint/no-unused-vars': 'error',
    '@typescript-eslint/no-explicit-any': 'error',
    '@typescript-eslint/prefer-nullish-coalescing': 'error',
    
    // React best practices
    'react/jsx-key': 'error',
    'react-hooks/exhaustive-deps': 'error',
    
    // Accessibility requirements
    'jsx-a11y/alt-text': 'error',
    'jsx-a11y/aria-props': 'error',
    'jsx-a11y/aria-proptypes': 'error',
    'jsx-a11y/aria-unsupported-elements': 'error',
    'jsx-a11y/role-supports-aria-props': 'error',
    
    // Import organization
    'import/order': ['error', {
      'groups': [
        'builtin',
        'external', 
        'internal',
        'parent',
        'sibling',
        'index'
      ],
      'pathGroups': [
        {
          'pattern': '@/**',
          'group': 'internal',
          'position': 'before'
        }
      ]
    }]
  }
}
```

### File & Folder Organization
```
src/
├── app/                    # Next.js App Router
│   ├── (auth)/            # Route groups
│   ├── (dashboard)/
│   ├── api/               # API routes
│   └── globals.css
├── components/
│   ├── ui/                # Design system components
│   ├── quiz/              # Quiz-specific components
│   ├── multiplayer/       # Multiplayer components
│   └── accessibility/     # A11y utilities
├── lib/
│   ├── supabase/          # Database layer
│   ├── utils/             # Utility functions
│   ├── hooks/             # Custom React hooks
│   ├── types/             # TypeScript definitions
│   └── constants/         # App constants
├── tests/
│   ├── __fixtures__/      # Test data
│   ├── __mocks__/         # Mocks
│   └── setup.ts           # Test setup
└── docs/                  # Documentation
```

### Documentation Standards
```typescript
/**
 * Calculates civic knowledge score based on quiz performance
 * 
 * @param attempts - Array of quiz attempts by the user
 * @param weights - Optional scoring weights for different categories
 * @returns Comprehensive civic knowledge assessment
 * 
 * @example
 * ```typescript
 * const score = calculateCivicScore(userAttempts, {
 *   constitution: 0.4,
 *   localGov: 0.3,
 *   voting: 0.3
 * })
 * ```
 * 
 * @throws {Error} When attempts array is empty
 */
export function calculateCivicScore(
  attempts: QuizAttempt[],
  weights?: ScoreWeights
): CivicKnowledgeScore {
  // Implementation
}
```

## Mission-Critical Reminders

### Every Line of Code Must Advance Democracy
- **Accessibility is non-negotiable** - No citizen excluded from civic learning
- **Performance affects participation** - Slow sites deter civic engagement
- **Security protects democracy** - Vulnerabilities compromise trust
- **Quality enables scale** - Clean code serves more citizens effectively

### Success Metrics
- **User Outcomes**: Citizens become more confident civic participants
- **Technical Excellence**: 100% WCAG AA compliance, <2s load times
- **Code Quality**: Zero critical bugs, comprehensive test coverage
- **Democratic Impact**: Measurable increase in civic engagement

**Remember**: We're not building a typical app. We're building civic education that politicians don't want people to have. Every technical decision should advance democratic participation.

---

*This is code that strengthens democracy. Build it well.*
