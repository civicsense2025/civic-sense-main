---
description: 
globs: 
alwaysApply: false
---
# CivicSense Documentation & Organization Rules

## Core Philosophy
**Clean code is civic duty.** Just as CivicSense demands clarity and truth in civic education, our codebase must be transparent, well-documented, and maintainable. Every line of code serves our mission of democratic participation.

---

## 1. Code Documentation Standards

### 1.1 Function Documentation
**REQUIRED**: All public functions must have JSDoc comments with:
```typescript
/**
 * Brief description of what this function does for civic education
 * 
 * @param {Type} paramName - Description focusing on civic impact
 * @returns {Type} Description of return value and its use case
 * 
 * @example
 * ```typescript
 * const result = analyzeQuizPerformance(attempts, { includeTimeAnalysis: true })
 * ```
 * 
 * @throws {ErrorType} When specific error conditions occur
 * @since Version when this was added
 */
```

### 1.2 Component Documentation
**REQUIRED**: React components must include:
```typescript
/**
 * ComponentName - Brief description of civic education purpose
 * 
 * Manages [specific civic learning functionality]. Key features:
 * - Feature 1 that advances democratic participation
 * - Feature 2 that reveals power structures
 * - Feature 3 that enables civic action
 * 
 * @example
 * ```tsx
 * <ComponentName
 *   prop1="value"
 *   onAction={(result) => handleCivicAction(result)}
 * />
 * ```
 */
export interface ComponentNameProps {
  /** Description focusing on civic impact */
  prop1: string
  /** Callback for civic actions */
  onAction?: (result: ActionResult) => void
}
```

### 1.3 Complex Logic Documentation
**REQUIRED**: Any algorithm or business logic with civic implications must include:
- **Purpose**: How this serves our civic education mission
- **Power Analysis**: What power structures this reveals or addresses
- **User Impact**: How this affects learner experience and democratic participation
- **Edge Cases**: Scenarios that could affect civic learning outcomes

### 1.4 Database Schema Documentation
**REQUIRED**: All tables and migrations must include:
```sql
-- Table: user_quiz_attempts
-- Purpose: Track civic learning progress and identify knowledge gaps
-- Civic Impact: Enables personalized learning paths for democratic participation
COMMENT ON TABLE user_quiz_attempts IS 'Tracks quiz attempts to build civic competency profiles';
COMMENT ON COLUMN user_quiz_attempts.power_dynamics_revealed IS 'Count of power structures user learned about';
```

---

## 2. Codebase Organization & Cleanup

### 2.1 The "No Mess" Principle
**RULE**: Leave the codebase cleaner than you found it.

**Before ANY commit:**
- [ ] Remove commented-out code (use git history instead)
- [ ] Delete unused imports and variables
- [ ] Remove console.log statements (use proper logging)
- [ ] Clean up temporary variables and quick fixes
- [ ] Remove empty files and directories

### 2.2 Quick Fix Cleanup Protocol
**RULE**: Quick fixes are debt that must be paid immediately.

**When implementing quick fixes:**
1. **Label immediately**: Add TODO with your name and date
   ```typescript
   // TODO: [YourName] [2024-01-15] Refactor this quick fix for proper error handling
   ```
2. **Set deadline**: Create GitHub issue for proper fix within 48 hours
3. **Track debt**: Add to technical debt section of changelog
4. **Clean up**: Proper implementation must happen before next release

### 2.3 File Organization Standards
```
components/
‚îú‚îÄ‚îÄ ui/                    # Reusable UI components
‚îú‚îÄ‚îÄ civic-education/       # Core learning components
‚îú‚îÄ‚îÄ democracy-tools/       # Civic action and participation tools
‚îú‚îÄ‚îÄ admin/                # Admin-only functionality
‚îî‚îÄ‚îÄ [feature]/            # Feature-specific components
    ‚îú‚îÄ‚îÄ index.ts          # Export all public components
    ‚îú‚îÄ‚îÄ types.ts          # Feature-specific types
    ‚îú‚îÄ‚îÄ utils.ts          # Feature-specific utilities
    ‚îî‚îÄ‚îÄ README.md         # Feature documentation
```

### 2.4 Import Organization (Enforce Existing Standard)
```typescript
// 1. React and external libraries
import React, { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'

// 2. Internal services and utilities  
import { civicEducationService } from '@/lib/services'
import { formatCivicData } from '@/lib/utils'

// 3. UI components (external first, then internal)
import { Button } from '@/components/ui/button'
import { QuizEngine } from '@/components/civic-education'

// 4. Types and constants
import type { CivicLearningGoal } from '@/lib/types'
import { CIVIC_CONSTANTS } from '@/lib/constants'
```

---

## 3. Changelog Management

### 3.1 Dual Changelog System
**REQUIRED**: Maintain both internal and public changelogs.

#### Internal Changelog (`CHANGELOG-INTERNAL.md`)
```markdown
# CivicSense Internal Changelog

## [Unreleased]
### Added - Civic Education Features
- New quiz engine for constitutional knowledge
- Multiplayer civic engagement games

### Changed - Democratic Participation Tools  
- Enhanced progress tracking for learning paths
- Improved accessibility for civic content

### Fixed - Power Structure Analysis
- Corrected bias detection in news analysis
- Fixed quiz question randomization algorithm

### Technical Debt
- TODO: Refactor auth provider for better error handling
- TODO: Optimize quiz database queries
```

#### Public Changelog (`/app/changelog/page.tsx`)
```markdown
# What's New in CivicSense

## Latest Updates

### üéØ New Civic Learning Features
**January 15, 2024**
- **Constitutional Quiz Engine**: Test your knowledge of constitutional principles and power structures
- **Multiplayer Civic Games**: Learn with friends while exploring democratic processes
- **Progress Tracking**: See your civic knowledge growth over time

### üîß Improvements to Democratic Tools
**January 10, 2024**
- **Accessibility Updates**: Screen reader support for all quiz content
- **Mobile Optimization**: Better experience on phones for civic learning on-the-go
```

### 3.2 Changelog Entry Requirements
**EVERY meaningful change must include:**

#### For Internal Changelog:
- **Date**: Exact commit date (YYYY-MM-DD format)
- **Category**: Added/Changed/Fixed/Security/Technical Debt
- **Civic Impact**: How this serves our democratic education mission
- **Technical Details**: Implementation specifics for developers
- **Migration Notes**: Any breaking changes or upgrade steps

#### For Public Changelog:
- **User-Friendly Date**: Month DD, YYYY format
- **Civic Mission Focus**: How this improves democratic participation
- **Emoji Categories**: üéØ New Features, üîß Improvements, üêõ Bug Fixes, üõ°Ô∏è Security
- **Benefit Statement**: Clear explanation of user value
- **No Technical Jargon**: Accessible to all users

### 3.3 Changelog Automation
**REQUIRED**: Use conventional commits for automatic changelog generation.

```bash
# Format: type(scope): description
feat(quiz): add constitutional rights assessment
fix(auth): resolve login timeout for guest users  
docs(api): update civic education endpoint documentation
refactor(db): optimize quiz performance queries
```

**CRITICAL**: Always use git history to determine actual release dates and features for changelogs. Use:
```bash
git log --oneline --since="2025-06-01" --pretty=format:"%h %ad %s" --date=short
```
To get accurate commit history with dates. Changelog entries must reflect what was actually built, not hypothetical features. This ensures transparency and accuracy in our development timeline.

### 3.4 Release Documentation Process
**Before any release:**

1. **Update Internal Changelog**
   - Review all commits since last release
   - Categorize by civic education impact
   - Add technical debt section
   - Include migration instructions

2. **Create Public Changelog Entry**
   - Focus on user benefits and civic mission
   - Use accessible language
   - Include screenshots/demos where helpful
   - Highlight democratic participation improvements

3. **Cross-Reference**
   - Ensure public changelog reflects all user-facing changes
   - Link internal technical details to public feature announcements
   - Verify dates match across both changelogs

---

## 4. Documentation Maintenance

### 4.1 Living Documentation Principle
**RULE**: Documentation must be updated with every code change.

**Before merging any PR:**
- [ ] Update relevant component documentation
- [ ] Add/update API documentation for changed endpoints
- [ ] Update user-facing documentation for feature changes
- [ ] Verify all code examples still work
- [ ] Update changelog entries

### 4.2 README Standards
**Each feature directory must have README.md with:**

```markdown
# Feature Name

## Civic Education Purpose
Brief explanation of how this serves democratic participation.

## Key Components
- Component 1: Description of civic learning function
- Component 2: Description of democratic action facilitation

## Usage Examples
```typescript
// Example showing civic education use case
import { FeatureComponent } from './index'

<FeatureComponent 
  learningGoal="constitutional-rights"
  onProgress={(progress) => trackCivicLearning(progress)}
/>
```

## Power Dynamics Addressed
- What power structures this feature reveals
- How it empowers users in democratic processes

## Testing
- How to test civic education functionality
- Key scenarios for democratic participation

## Technical Debt
- Current limitations
- Planned improvements
- Known issues affecting civic mission
```

### 4.3 API Documentation
**All API endpoints must document:**
- **Civic Purpose**: How this endpoint serves democratic education
- **Authentication Requirements**: User vs guest access patterns
- **Rate Limits**: Especially important for civic content access
- **Error Codes**: With civic-mission-focused error messages
- **Examples**: Real-world civic education use cases

---

## 5. Quality Gates

### 5.1 Pre-Commit Checklist
**REQUIRED before every commit:**
- [ ] All TODO items have GitHub issues with deadlines
- [ ] No commented-out code remains
- [ ] All console.log/debug statements removed
- [ ] Documentation updated for changed functionality
- [ ] Changelog entry added (if user-facing change)
- [ ] No unused imports or variables
- [ ] TypeScript errors resolved
- [ ] Tests pass and cover civic education scenarios

### 5.2 PR Review Checklist
**REQUIRED for every pull request:**
- [ ] **Civic Mission Alignment**: Changes serve democratic education goals
- [ ] **Documentation Complete**: All new code documented appropriately
- [ ] **Changelog Updated**: Both internal and public if applicable  
- [ ] **Clean Code**: No temporary fixes or tech debt without tracking
- [ ] **Performance Impact**: No degradation to civic learning experience
- [ ] **Accessibility Compliance**: All changes meet standards in `.cursor/rules/accessibility-standards.mdc`
- [ ] **Testing**: Civic education functionality verified with accessibility testing

### 5.3 Release Checklist
**REQUIRED before any release:**
- [ ] **Changelog Comprehensive**: All changes documented with dates
- [ ] **Documentation Current**: All README files and API docs updated
- [ ] **Technical Debt Tracked**: All known issues documented
- [ ] **Migration Guide**: Breaking changes properly documented
- [ ] **User Communication**: Public changelog ready for announcement
- [ ] **Civic Impact Measured**: How release advances democratic participation

---

## 6. Enforcement

### 6.1 Automated Checks
**Implement pre-commit hooks for:**
- ESLint rules for documentation requirements
- Prettier formatting for consistent code style
- TypeScript compilation to catch documentation issues
- Custom rules to check for TODO without GitHub issues

### 6.2 Code Review Standards
**Reviewers must verify:**
- Civic mission alignment of all changes
- Complete documentation of new functionality
- Proper changelog entries with accurate dates
- No technical debt without tracking issues
- Clean, maintainable code organization

### 6.3 Documentation Debt
**Track and address:**
- Outdated documentation as high-priority technical debt
- Missing civic education context in code comments
- Inconsistent changelog entries
- Broken or outdated code examples

---

## 7. Success Metrics

### 7.1 Code Quality Metrics
- **Documentation Coverage**: >90% of public functions documented
- **Changelog Completeness**: 100% of user-facing changes documented
- **Technical Debt Ratio**: <10% of codebase marked as TODO/FIXME
- **Clean Code Score**: Automated checks for unused code, proper imports

### 7.2 Civic Mission Metrics
- **Accessibility Compliance**: 100% of civic education features accessible
- **Documentation Clarity**: User feedback on feature understanding
- **Democratic Impact**: How well documentation supports civic learning goals

---

**Remember**: Every piece of documentation is a tool for democratic empowerment. Write for the citizen who wants to understand how their digital civic education platform works, just as we write civic content for citizens who want to understand how their government works.

**This is documentation for people who want to build better democracy through technology.**
