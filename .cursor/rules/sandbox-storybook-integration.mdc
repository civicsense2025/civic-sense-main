---
description: Whenever a new component / organism is created and we need to see UI/UX
globs: 
alwaysApply: false
---
# CivicSense Sandbox & Storybook Integration Rules

*Comprehensive guidelines for component development, testing, and documentation workflow*

## Overview

The CivicSense development workflow uses a dual-track approach for component development:
- **Sandbox** (`/app/sandbox/`) - Live development environment for testing components with real data
- **Storybook** - Isolated component documentation and testing with mock data

All sandbox content is excluded from version control to prevent demo pollution in production.

## Sandbox Development Rules

### 1. Sandbox Structure

```
app/sandbox/
â”œâ”€â”€ page.tsx                    # Sandbox index with all demos
â”œâ”€â”€ layout.tsx                  # Consistent sandbox layout
â”œâ”€â”€ [demo-name]/               # Stable demos
â”‚   â”œâ”€â”€ page.tsx
â”‚   â””â”€â”€ components/            # Demo-specific components
â””â”€â”€ test/                      # Experimental tests
    â”œâ”€â”€ [test-name]/
    â”‚   â”œâ”€â”€ page.tsx
    â”‚   â””â”€â”€ components/
    â””â”€â”€ ...
```

### 2. Component Development Workflow

**Step 1: Sandbox Development**
Create sandbox test page with comprehensive scenarios.

**Step 2: Update Sandbox Index**
Add your component to the appropriate demos or tests array.

**Step 3: Create Storybook Story**
Document all variants and states in Storybook.

**Step 4: Component Implementation**
Build production-ready component with proper error handling.

### 3. Sandbox Categories & Status

**Categories:**
- `Admin`, `AI`, `Analytics`, `Auth`, `Content`, `Forms`, `Games`, `Payments`, `Social`, `Storage`, `UI`, `i18n`, `Accessibility`

**Status Levels:**
- `stable` - Production-ready, thoroughly tested
- `experimental` - In development, may have bugs  
- `debug` - Debugging tools, not user-facing

### 4. Sandbox Page Template

```typescript
// app/sandbox/[category]/[component-name]/page.tsx
import { Container } from '@/components/ui/container'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'

export default function ComponentTestPage() {
  return (
    <Container className="py-8">
      {/* Header with metadata */}
      <div className="mb-8">
        <div className="flex items-center gap-2 mb-4">
          <h1 className="text-2xl font-bold">ðŸ§ª Component Name Test</h1>
          <Badge className="bg-yellow-100 text-yellow-800">Experimental</Badge>
          <Badge variant="outline">UI Category</Badge>
        </div>
        <p className="text-gray-600 mb-4">
          Brief description of what this component does and what's being tested.
        </p>
        <div className="flex gap-2">
          <Button 
            variant="outline" 
            size="sm"
            onClick={() => window.open('http://localhost:6006/?path=/story/components-componentname--default', '_blank')}
          >
            ðŸ“– View in Storybook
          </Button>
          <Button 
            variant="outline" 
            size="sm"
            onClick={() => window.location.reload()}
          >
            ðŸ”„ Refresh Test
          </Button>
        </div>
      </div>

      {/* Test scenarios organized in cards */}
      <div className="grid gap-6">
        <Card>
          <CardHeader>
            <CardTitle>Default State</CardTitle>
          </CardHeader>
          <CardContent>
            <ComponentUnderTest {...defaultProps} />
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Loading State</CardTitle>
          </CardHeader>
          <CardContent>
            <ComponentUnderTest {...defaultProps} isLoading={true} />
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Error State</CardTitle>
          </CardHeader>
          <CardContent>
            <ComponentUnderTest {...defaultProps} error="Test error message" />
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Edge Cases</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <h4 className="font-medium mb-2">Very Long Text</h4>
              <ComponentUnderTest {...longTextProps} />
            </div>
            
            <div>
              <h4 className="font-medium mb-2">Empty Data</h4>
              <ComponentUnderTest data={null} />
            </div>
            
            <div>
              <h4 className="font-medium mb-2">Minimal Data</h4>
              <ComponentUnderTest {...minimalProps} />
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Development Notes */}
      <Card className="mt-8 bg-blue-50 border-blue-200">
        <CardHeader>
          <CardTitle>Development Notes</CardTitle>
        </CardHeader>
        <CardContent>
          <ul className="list-disc list-inside space-y-1 text-sm text-gray-600">
            <li>Component handles loading states correctly</li>
            <li>Error boundaries prevent crashes</li>
            <li>Responsive design works on mobile</li>
            <li>Accessibility tested with keyboard navigation</li>
            <li>TODO: Add animation transitions</li>
          </ul>
        </CardContent>
      </Card>
    </Container>
  )
}
```

## Storybook Integration Rules

### 1. Story Organization

```
stories/
â”œâ”€â”€ components/           # Component stories
â”‚   â”œâ”€â”€ ui/              # UI component stories
â”‚   â”œâ”€â”€ quiz/            # Quiz-specific stories
â”‚   â”œâ”€â”€ auth/            # Auth component stories
â”‚   â””â”€â”€ ...
â”œâ”€â”€ pages/               # Page-level stories
â”œâ”€â”€ examples/            # Usage examples
â””â”€â”€ design-system/       # Design system documentation
```

### 2. Story Standards

**Required Stories for Each Component:**
- `Default` - Basic usage
- `All Variants` - Every prop combination
- `Loading` - Loading states
- `Error` - Error states  
- `Empty` - Empty/null data states
- `Interactive` - User interactions
- `Accessibility` - Keyboard navigation, screen readers

**Story Documentation Template:**
```typescript
const meta: Meta<typeof Component> = {
  title: 'Components/ComponentName',
  component: Component,
  parameters: {
    layout: 'centered',
    docs: {
      description: {
        component: `
          Detailed description of the component's purpose and usage.
          
          ## Usage Guidelines
          - When to use this component
          - Best practices
          - Common patterns
          
          ## Accessibility
          - Keyboard navigation support
          - Screen reader compatibility
          - ARIA attributes used
        `
      }
    }
  },
  tags: ['autodocs'],
  argTypes: {
    variant: {
      control: { type: 'select' },
      options: ['default', 'compact', 'detailed']
    }
  }
}
```

### 3. Testing Integration

**Visual Regression Testing:**
```typescript
// .storybook/test-runner.ts
import type { TestRunnerConfig } from '@storybook/test-runner'

const config: TestRunnerConfig = {
  async postRender(page, context) {
    const screenshot = await page.screenshot()
    expect(screenshot).toMatchSnapshot(`${context.title}.png`)
  }
}
```

**Accessibility Testing:**
```typescript
export const AccessibilityTest: Story = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement)
    
    // Test keyboard navigation
    await userEvent.tab()
    expect(canvas.getByRole('button')).toHaveFocus()
    
    // Test screen reader
    expect(canvas.getByRole('button')).toHaveAttribute('aria-label')
  }
}
```

## Migration Strategy

### Moving Existing Demos to Sandbox

1. **Create sandbox page** for each existing demo
2. **Move demo content** to sandbox structure
3. **Update navigation** to use sandbox index
4. **Create Storybook stories** for reusable components
5. **Delete original demo pages** from main app

### Example Migration

```bash
# Before
app/admin-content-demo/page.tsx

# After  
app/sandbox/admin-content/page.tsx
stories/admin/ContentGenerator.stories.tsx
```

## Quality Gates

### Before Moving to Production

**Component Checklist:**
- [ ] All variants tested in sandbox
- [ ] Storybook stories complete with docs
- [ ] Visual regression tests passing
- [ ] Accessibility tests passing
- [ ] Mobile responsive testing completed
- [ ] Error states handled gracefully
- [ ] Loading states implemented
- [ ] TypeScript types properly defined
- [ ] Unit tests written
- [ ] Code review completed

**Integration Checklist:**
- [ ] Component integrates with design system
- [ ] Follows CivicSense brand guidelines
- [ ] Performance impact measured
- [ ] Bundle size acceptable
- [ ] No console errors or warnings
- [ ] Works with existing auth system
- [ ] Internationalization support if needed

## Development Commands

```bash
# Start sandbox development
npm run dev                    # Next.js dev server
npm run storybook             # Storybook dev server

# Testing
npm run test                  # Unit tests
npm run test:storybook        # Storybook tests
npm run test:visual           # Visual regression tests

# Quality checks
npm run lint                  # ESLint
npm run type-check           # TypeScript check
npm run accessibility        # Accessibility audit
```

## Best Practices

### 1. Sandbox Development
- **Use real data** when possible for accurate testing
- **Test edge cases** thoroughly before production
- **Document known issues** in sandbox pages
- **Keep sandbox pages simple** and focused on testing

### 2. Storybook Documentation  
- **Write clear descriptions** for each story
- **Include usage examples** in docs
- **Document accessibility features**
- **Keep stories isolated** from external dependencies

### 3. Component Design
- **Follow atomic design principles**
- **Make components composable**
- **Handle all possible states**
- **Use consistent naming conventions**
- **Include proper TypeScript types**

### 4. Testing Strategy
- **Test in isolation** (Storybook) and **integration** (Sandbox)
- **Cover all user interactions**
- **Test with assistive technologies**
- **Verify responsive behavior**
- **Check performance impact**

## Common Patterns

### Form Components
```typescript
// Sandbox: Test with various validation states
// Storybook: Show all field types and validation states
// Production: Integrate with form libraries
```

### Data Display Components
```typescript
// Sandbox: Test with real API data
// Storybook: Show with mock data variants
// Production: Optimize for performance
```

### Interactive Components
```typescript
// Sandbox: Test user flows end-to-end
// Storybook: Test individual interactions
// Production: Add analytics tracking
```

## Troubleshooting

### Common Issues

**Sandbox page not loading:**
- Check for TypeScript errors
- Verify all imports are correct
- Ensure sandbox layout is applied

**Storybook story not rendering:**
- Check story export format
- Verify component props match story args
- Check for missing dependencies

**Components breaking in production:**
- Test with production data structure
- Check for environment-specific code
- Verify all dependencies are installed

### Debug Tools

```typescript
// Add to sandbox pages for debugging
const DebugPanel = ({ data }: { data: any }) => (
  <details className="mt-4">
    <summary className="cursor-pointer font-medium">Debug Info</summary>
    <pre className="bg-gray-100 p-4 rounded mt-2 text-xs overflow-auto">
      {JSON.stringify(data, null, 2)}
    </pre>
  </details>
)
```

## Implementation Checklist

### Adding New Components to Sandbox
- [ ] Create new sandbox pages under `/app/sandbox/`
- [ ] Use the sandbox layout for consistent styling
- [ ] Add to sandbox index page with proper categorization and status
- [ ] Include Storybook stories for reusable components
- [ ] Document any special setup or API keys required

### Component Development Flow
1. Build component in sandbox with test data
2. Create Storybook story with all variants
3. Add unit tests for core functionality
4. Move to production app when stable
5. Keep sandbox version for continued testing

### Quality Enforcement
- [ ] Component passes all accessibility tests
- [ ] All user interface states are covered
- [ ] Performance benchmarks are acceptable
- [ ] Documentation is complete and accurate
- [ ] TypeScript types are properly defined

---

**Remember:** The sandbox and Storybook work together to provide comprehensive component development. Use sandbox for integration testing with real data, and Storybook for isolated component documentation and testing.
